// Easy.ajax.js v1.0.0

Easy.ajax.js é uma ferramenta ou ficheiro auxiliar que possibilita o desenvolvedor alcançar um servidor usando ajax.

Tal como o ajax funciona, para fazer uma requisição de dados deve identificar uma URL ou caminho que fica localizado o servidor, 
para isso existe uma variável auxiliar chamada 'e_url', nela deverá ser identificada a URL base do servidor.
Ex.: http://127.0.0.1/api/ ou https://myapiserver.com/api/.
Com isso poderá se fazer requisição fáces, simplesmente colocando o nome do Controlador.

As funções de manipulação de dados são: add, remove, update, list, getOne. todas as funções devem retornar uma outra 
função chamada "e_return", que contem um estado da requisição, a mensagem da requisição e o objecto em si. 
A sintaxe é: e_return([Boolean], [String], [Object]).
    - [Boolean]: O estado da requisição.
    - [String]: A mensagem de da requisição.
    - [Object]: O objecto de requisição que pode ser nulo para o caso de mensagem de erro.

    Nota': todas as funções de acesso devem 'SEMPRE' retornar o objecto que foi manElemento pra base de dados, significa que, no 
    caso de inserção o objecto último inserido na base de dados deverá ser retornado, no caso de actualização também, para 
    que o easy possa saber a sua chave e os seus valores.

    Nota'': As funções recebem os dados preparados e passados pelo easy.js e decide onde os dados serão executados ou 
    enviados.
    
    * add: Ela executa a função 'post' no ajax. Sintaxe add([TableName], [Object]).
        - [TableName]: É passado o nome da tabela, a referência na base de dados, ou a rota do servidor (só o final).
        - [Object]: É passado o objecto que deverá ser inserido na base de dados.
    
    * remove: Ela executa a função 'delete' no ajax. Sintaxe remove([TableName], [String], [TableField{Optional:Default=Id}]).
        - [TableName]: É passado o nome da tabela, a referência na base de dados, ou a rota do servidor (só o final).
        - [String]: É passado o valor que é combinado com o [TableField] que por padrão é "Id" pra poder executar a 
        função de remocão mais livre. Ex.: [String] = 'AfonsoMatElias' e [TableField] = 'Username'. Mas geralmente neste 
        campo é passado o valor da chave primária.
        - [TableField{Optional:Default=Id}]: É passado o nome do campo que deverá ser combinado com o [String].

    * update: Ela executa a função 'put' no ajax. Sintaxe é update([TableName], [Object], [ElemKeyVal]).
        - [TableName]: É passado o nome da tabela, a referência na base de dados, ou a rota do servidor (só o final).
        - [Object]: É passado o objecto que deverá ser inserido na base de dados.
        - [ElemKeyVal]: É o valor da chave primária do elemento.

    * list: Ela executa a função 'get' no ajax. Sintaxe list([TableName], [FilterExpression:String{Optional}], [String{Optional}]).
        - [TableName]: É passado o nome da tabela, a referência na base de dados, ou a rota do servidor (só o final).
        - [FilterExpression:String{Optional}]: A expressão para filtrar os dados vindo do servidor.
        Para filtar os dados retornados no easy.free.js deve ser usado uma função auxiliar chamada
        e_data_filter([List], [String]).
            - [List]: A lista de dados retornado.
            - [String]: A expressão de filtro.

    * getOne: Ela executa a função 'get' no ajax. Sintaxe getOne([TableName], [String], [TableField{Optional:Default=Id}]).
        - [TableName]: É passado o nome da tabela, a referência na base de dados, ou a rota do servidor (só o final).
        - [String]: É passado o valor que é combinado com o [TableField] que por padrão é "Id" pra poder executar a 
        função de remocão mais livre. Ex.: [String] = 'AfonsoMatElias' e [TableField] = 'Username'. Mas geralmente neste 
        campo é passado o valor da chave primária.
        - [TableField{Optional:Default=Id}]: É passado o nome do campo que deverá ser combinado com o [String].