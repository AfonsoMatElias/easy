/**
 * @author Afonso Matumona Elias
 * @version v1.0.0
 * Released under the MIT License.
 * easy.js 'easy and asynchronous js' is a javascript framework for developing web or mobile app a little bit faster. 
 * Copyright 2019 Afonso Matumona <afonsomatumona@hotmail.com>
 * # Be Happy ;-)  
 */

 // This text was translated from Google Translator.

Easy js is a javascript framework to aid in the creation of web or mobile applications. It extends from "Easy and asynchronous js". Enables and facilitates the provision of information coming from a server or a data source, it also enables
create objects automatically as defined by the developer and send it to a server.

Easy.js allows the current page to be a "realtime" page or with "real-time" data, so we can say that in all sections
of the HTML DOM where "callback" or "return function" was used or even sections used the fill function becomes "real-time" section.

To perform data access functions to the server, easy offers some asynchronous functions that make this possible. The functions are:
'create', 'read', 'update', 'delete', 'getOne' and an extra 'addHtml'.
It even offers the ability to manage a list in javascript with the same data access functions listed above.
Functions can be called or performed as follows:

	Base sintaxe : - easy.[function]. Returns "easy return type object" consisting of {status: [Boolean], msg: [String], result: [Object]}.
		status: The request state that can be "true" for successful request and "false" for unsuccessful request.
		msg: It is the request message, which can be either an error text or an object.
		result: The return object from the server.
		
		# create: easy.create([TableName], [HTMLElement/JsObject], [Id:Boolean{Opcional}])
			 - [TableName]: The name of the table or the reference in the database.
			 - [HTMLElement]: The element selector in the HTML DOM. Example: '#PessoaForm'.
			 - [Id: Boolean {Optional}]: Value "true" / "false", which determines if an Id field should be generated in the creation of the object,
			"true" generate Id, "false" does not generate. By default the value is "false".
			
			Ex.': easy.create('Pessoa', '#PessoaForm');
			Ex.'': easy.create('Pessoa', '#PessoaForm',true);
			Ex.''': easy.create('Pessoa', { Id:'P0001', Nome:'Afonso Matumona', Idade: 23 });
			Ex.'''': easy.create('Pessoa', { Nome:'Afonso Matumona', Idade: 23 }, true);
			

		# read: easy.read([TableName], [Callback], [FilterExpression:String{Opcional}], [String{Opcional}])
			 - [TableName]: The name of the table or the reference in the database.
			 - [Callback]: The return function that is passed one element at a time.
			 - [FilterExpression: String {Optional}]: The expression to filter data coming from the server. Example: Name == Afonso Matumona.
			 - [String {Optional}]: Some value that will be sent to the server.
			
			Ex.': async loadData function(){ 
					var result = await easy.read('Pessoa');
					console.log(result);
				 }

			Ex.'': easy.read('Pessoa', function(e){
					 console.log(e);
				 });
			
			Ex.''': easy.read('Pessoa', function(e){
					 console.log(e);
				 }, 'Nome==Elias');
			
			Ex.'''': easy.read('Pessoa', function(e){
					 console.log(e);
				 }, null, 'AfonsoMatElias');
			
		# update: easy.update([TableName], [HTMLElement], [ElemKeyVal])
			- [TableName]: The name of the table or the reference in the database.
			- [HTMLElement]: The element selector in html. Example: '#PessoaForm'.
			- [ElemKeyVal]: The value of the primary key of the object or even the value of the e-key attribute.
			Note: this function allows updating simply a value in an object, keeping all other values intact, from the
			update form, there are simply the values that you want to update.
			Ex.': easy.update('Pessoa', '#PessoaForm', 'P0001');
			Ex.'': easy.update('Pessoa', { Nome:'Matumona Elias', Idade: 16 }, 'P0001');

		# delete: easy.delete([TableName], [String], [TableField{Opcional:Default=Id}])
			- [TableName]: The name of the table or the reference in the database.
			- [String]: The value of the field that by default is Id of the object to be removed.
			- [TableField {Optional: Default = Id}]: The field that wants to be combined with [String] so that the object is removed.
			Note: The combination must be done on the server.
			
			Ex.': easy.delete('Pessoa', 'P0001');
			Ex.'': easy.delete('Pessoa', 'Afonso Matumona',  'Nome');
		
		# getOne: easy.getOne([TableName], [String], [HTMLSelector{Opcional}], [TableField{Opcional:Default=Id}])
			- [TableName]: The name of the table or the reference in the database.
			- [String]: The value of the field that by default is Id of the object to be selected.
			- [HTMLSelector]: The element selector in the HTML DOM. Example: '#PessoaForm'.
			- [TableField {Optional: Default = Id}]: The field that wants to be combined with [String] so that the object is removed.
			Note: The combination must be done on the server.
			
			Ex.': async loadData function(){ 
					var result = await easy.getOne('Pessoa', 'P0001');
					console.log(result);
				 }
				 loadData();

			Ex.'': easy.getOne('Pessoa', 'P0001', '#Pessoa');
			
			Ex.''': easy.getOne('Pessoa', 'AfonsoMatElias', '#Pessoa', 'Nome');
	
		In order to use the data manipulation functions in a javascript list, the 'source' function must be added and
		be the source of data, after the function of any manipulator.
		The base syntax is: easy.source (...). [Easy-Function]. As in the base syntax, after adding the source function, you can use
		manipulation functions mentioned above.
		Note: If the 'source' function is used to access the root of the list, 'null' must be passed in the '[TableName]' parameter, with
		this is possible to reference the root of the list since null is passed in the name of the table to access.

		* Extra: There are some functions and auxiliary extensions for manipulating an HTML DOM element. Functions for
		such are: addHtml, fillHtml, easy.header, e_generateObj (), and (...).
		The extensions for this are: fullTyping.

		* easy.addHtml([HTMLSelector{Container}], [DbElement], [Reverse:Boolean{Opcional}]): Allows you to add elements to a container since
			the same is an easy template.
			- [HTMLSelector {Container}]: The container where the items should be listed.
			- [DbElement]: An element of a data list.
			- [Reverse: Boolean {Optional}]: Insert reversal "true" / "false" value, determines how the element should be inserted, "Append -> false"
			or "Prepend -> true". Note: By default the value is false.
			Note: This function must be strictly used with the easy.read function or any other data source.

			Ex.: easy.read('Pessoa', function(e){
					easy.addHtml('#PessoaContianer', e);
				});
			
		* easy.header([Header]): Allows you to configure the ajax header before the data is sent.
			Ex.: easy.header({
				'Content-Type':'application/json'
			}).create(...);

		* easy.fillHtml([HTMLSelector{Container}], [DbElement]): Allows to you fill data in a container.
			- [HTMLSelector {Container}]: The container where the items should be listed.
			- [DbElement]: The element to be filled in html.
			Ex.: easy.fillHtml('#PessoaContianer', obj);

		* e_generateObj([HTMLSelector], [GenerateId:Boolean{Opcional}]): Allows you to serialize a form and generate a structured object (when combined with
			the "e-build") based on what has been defined in the HTML.
			- [HTMLSelector]: The element selector. Ex .: '#PessoaContianer'.
			- [GenerateId: Boolean {Optional}]: Value "true" / "false", which determines if an Id field should be generated in the creation of the object,
			Note: Returns result, where the result is passed, and type, where the returned object type is passed.
			
			Ex.: 
			// HTML Code
			<form id="PessoaForm" >
				<div class="data-field">
					<label>Nome</label><br/>
					<input type="text" name="Nome" placeholder="Afonso" />
				</div>

				<div class="data-field">
					<label>Idade</label><br/>
					<input type="text" name="Idade" placeholder="23" />
				</div>

				<div e-build="Endereco">
					<div class="data-field">
						<label>Pais</label><br/>
						<select name="PaisId">
							<option e-tmp="Pais" value="-e-Id-">-e-Pais-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Provincia</label><br/>
						<select name="ProvinciaId">
							<option e-tmp="Provincia" value="-e-Id-">-e-Provincia-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Municipio</label><br/>
						<select name="MunicipioId">
							<option e-tmp="Municipio" value="-e-Id-">-e-Municipio-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Rua</label><br/>
						<input type="text" name="Rua" placeholder="23" />
					</div>
					
				</div>

				<div class="data-button">
					<button type="submit" >Salvar</button>
				</div>
			</form>

			// Javascript Code
			var obj = e_generateObj('#PessoaForm')
			console.log(obj);
			
			// Object gerado
			{
				Nome:"",
				Idade:0,
				Endereco:{
					PaisId:"",
					ProvinciaId:"",
					MunicipioId:"",
					Rua:""
				}

			}
		
		* e: e([HTMLElement], [Event], [Callback([Event], [Element])]).
			- [ElementId]: The id value of the element to be selected.
			- [Event]: The event to be triggered. Ex: 'click'
			- [Callback]: The function that will be triggered based on the selected event.
			- [EventCallback]: The event return.
			- [Element]: The element that was applied to the event.
			The element is passed back as callback / function parsing.
			Note: This extension lets you give actions to all elements, even those that are via javascript after the HTML DOM is loaded
			or ready.
			
			Ex.: e('#btn1' ,'click', function(e, el){
				console.log('Ol√°', e);
			});

		* fullTyping: [HTMLElement] .fullTyping ([Callback]): This extension allows you to retrieve the text of an input or textarea after 1.5s or after the user press the enter key,
			Widely used when searching for a server or database. Why use? Answer: Because it is not advisable on each pressed key to make a request to a server or a database,
			this may overwhelm it, so some of the solutions to this may be to this problem.
			- [Callback]: the function that will be triggered in 1.5s afterwards and if and only if the user has stopped typing or pressed the enter key.
			The same element is passed back as callback / function parsing.

			Ex.: document.getElementById('#serach').fullTyping(function(e){
				console.log('Texto digitado: ', e.value);
			});

There are commands that are defined as attributes of the HTML DOM elements, for the purpose of mapping the HTML DOM document and activating certain functionalities,
such as listing and automatic and / or manual filling of data coming from the server that makes the page "dynamic" or "real-time".
The commands for this are: "e-tmp", "em-tmp", "e-id", "e-filter", "e-anm", "-e", "e-code", "e -fill "," e-build "," e-rvs ".
	* e-tmp: It has the meaning "easy-template" that tells "easy" that it is intended to use the current element as the template
		where data coming from a server will be displayed, and how the value of the "template" will be the name of the table in the database.
		Syntax e-tmp = "[TableName]".
		Note: Using this command, the tool will automatically list in the template all data coming from the server.
		Nota'': Este comando √© estritamente combinado com o comando -e-.
			Ex.: <div e-tmp="Pessoa"></div>
		
  * e-m-tmp: It has the meaning "easy-manual-template" that tells "easy" that you want to use the current element as the template
		where data coming from a server will be displayed, and how the value of the template will be the name of the table in the database.
		Syntax e-m-tmp = "[TableName]".
		Note: Using this command, the tool will only list the data in the "template" the returned if it is traversed / using the callback of the
		search function along with the addHtml function. Syntax easy.addHtml ('[HTMLElement]', [object]).
		Note '': This command is strictly combined with the -e- command.
			Ex.: 
			// HTML Code
			<div id="PessoaContianer"> 
				<div e-m-tmp="Pessoa"></div>
			</div>
			
			// Javascript
			easy.read('Pessoa', function(p){
				easy.addHtml('#PessoaContianer', p);
			});
				
  * -e-[Field]-: It has as meaning "easy-replace" says or lets set values to an element or html properties, it is very powerful
		for allowing you to define values anywhere in an HTMLElement.
		Note: To access internal properties of an object, you must set the '.' Ex .: Person.Endereco.Name
		Syntax -e- [Field] -.
		Ex.: <div e-tmp="Pessoa">
				<p title="-e-Descricao-"> This name -e-Nome- is coming from a database or a server, and this is the use description: 
				-e-Descricao-.</p>
			</div>

		In the case of attributes, this command can be combined with the expression 'e-' before the name of such. Eg: e-src = "assets / -e-Name-". This enables
		create two attributes with the same purpose, eg 'src' and 'e-src', this means for the first attribute 'src' you can set the default value
		Eg: src = "assets / default-img.png". and 'e-src' is the value to be assigned at run time. Eg: e-src = "assets / -e-Img-".
	
	* e-filter: It has as meaning "easy-filter" says or allows to filter data from the html element, the data coming from the server,
		simply one condition at a time. The operators for the filters are: ==,! =, <,>, <=,> =. Syntax e-filter = "[Prop] [Op] [Val]".
		Note ': The command must be placed in the element list container. But in case the container and the template are the same
		elements can be put on this same element.
		Note '': This command only works with the "e-tmp" command.
		Ex.: <div e-tmp="Pessoa" e-filter="Idade>=10">
				<label> -e-Nome- </label>
				<label> -e-Idade- </label>
			</div>
	
  * e-id: It means "easy-id" says or lets easy know the primary key of the element to be listed or filled,
		if it is not set it takes the value of Id, which means that the 'primary key' field of the element that is being listed or filled,
		is 'Id'. Note: It is very important to define this field if by chance the element key is not 'Id', it is because of it the element becomes
		dynamic or realtime.
		Note: For all tables that have the primary key "Id" (Pascal Case), it may not be set because it will be automatically recognized.
		Note '': If the primary key is not 'Id' (Pascal Case), it should be explicitly defined as it is.
			Ex.: <div e-tmp="Pessoa" e-id="IdPessoa">
					<label > -e-Nome- </label>
				</div>
				
	* e-anm: It means "easy-animation" says or allows elements to be added in the HTML DOM in an animated way, with a certain
		and transition. Syntax e-anm = "[Direction]".
		The directions are: "up", "down", "left" or "right".
		- up: means that elements will be placed in the HTML DOM animatically from the bottom up.
		- down: this means that the elements will be placed in the HTML DOM animated from top to bottom.
		- left: this means that elements will be placed in the HTML DOM animatedly from right to left.
		- right: This means that the elements will be placed in the HTML DOM animatically from left to right.
		Ex.: <div e-tmp="Pessoa" e-anm="up">
				<label> -e-Nome- </label>
			</div>
	
	* e-code: It means "easy-code" says or allows easy to distinguish containers from templates.
		Note: it does not need to be defined, it will automatically be defined.

	* e-fill: It means "easy-fill" says or allows easy to fill a container with a certain
		the data subject. This command has almost the same function as the other two e-tmp and e-m-tmp commands, but the difference,
		is that e-fill aims to fill a single container with information, while the others serve to list
		information. Syntax e-fill = "[TableName]: [ElemKeyVal]: [ElemKeyName: {Optional: Default = Id}]"
		
		- [TableName]: The name of the table or the reference in the database.
		- [ElemKeyVal]: The value of the primary key of the object or even the value of the e-key attribute.
		- [ElemKeyName: {Optional: Default = Id}]: The name of the primary key field.
		Ex.: <div e-fill="Pessoa:P0001:IdPessoa" >
					<label > -e-Nome- </label>
				</div>

	* e-build: It means "easy-build" says or allows easy to construct an element object (usually a div) signed. 
	Syntax e-build = "[SomeObjectName]", in case the object's hierarchy is too deep, one can also put or '.' for power.
	Ex.: 
	// Primeira forma
	<form>

		<input="Nome" />
	
		<div e-build="Endereco">
	
			<input name="Rua" />

			<div e-build="Geo">
	
				<input name="Lat" />
				<input name="Lng" />

				<div e-build="Constelacao">
					<input name="Nome" />
				</div>

			<div/>
		<div/>
	</form>

	// Segunda forma
	<form>

		<input="Nome" />
	
		<div e-build="Endereco">
	
			<input name="Rua" />

			<div e-build="Endereco.Geo">
	
				<input name="Lat" />
				<input name="Lng" />

				<div e-build="Endereco.Geo.Constelacao">
					<input name="Nome" />
				</div>

			<div/>
		<div/>
	</form>
	
	* e-rvs: It has as meaning "easy-rvs" or "easy-reverse" says or allows reversing the insertion of elements in HTML,
		determines the way that element should be inserted, "Append -> false" or "Prepend -> true".
		Syntax e-rvs = "[Boolean]".
		Note ': It accepts two values,' true 'or' false '.
		Note '': If it is not set, the default action will be 'Append'

The easy.js for external access does not work by itself, so it has access to data must be combined with other files that enable this access,
the files can be found in the same section or folder of easy.js, the files have the following structure: easy. [type] .js