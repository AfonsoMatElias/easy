/**
 * @author Afonso Matumona Elias
 * @version v1.0.0
 * Released under the MIT License.
 * easy.js 'easy and asynchronous js' is a javascript framework for developing web or mobile app a little bit faster. 
 * Copyright 2019 Afonso Matumona <afonsomatumona@hotmail.com>
 * # Be Happy ;-)  
 */

Easy js é um javascript framework para auxiliar na criação de aplicações web ou mobile. Ela estende de "Easy and asynchronous js" que em portugues podemos traduzi-lo
como "Javascript fácil e assíncrono". Ela possibilita e facilita na disposição das informações vindas de um servidor ou uma fonte de dados, ela também possibilita
criacao de objectos automaticamente conforme o desenvolvedor definir e envia-lo a um servidor. 

Easy.js possibilita que a página corrente seja uma página "realtime" ou com dados "em tempo real", com isso, podemos dizer que em todas as secções
do HTML DOM onde foi usado o "callback" ou a "função de retorno" ou mesmo de secções usadas a função de preenchimento se torne secção "em tempo real". 

Para executar funções de acesso a dados ao servidor, o easy oferece alguns funções assíncronas que tornam isto possível. As funções são: 
'create', 'read', 'update', 'delete', 'getOne' e um extra 'addHtml'. 
Ele ainda oferece a possibilidade de gerir uma lista em javascript com as mesmas funções de acesso a dados listados em cima.
As funções podem ser chamadas ou executadas da seguinte forma:
	Sintaxe base: - easy.[function]. Retorna "easy return type object" composto por { status: [Boolean], msg: [String], result: [Object] }.
			status: É o estado da requisição que pode ser "true" para requisição bem sucedida e "false" para requisição mal sucedida.
			msg: É a mensagem requisição, que pode ser um um texto de erro ou um objecto.
			result: O objecto de retorno vindo do servidor.
		
		# create: easy.create([TableName], [HTMLElement/JsObject], [Id:Boolean{Opcional}])
			 - [TableName]: O nome da tabela ou a referência na base de dados.
			 - [HTMLElement]: O selector do elemento no HTML DOM. Ex.: '#PessoaForm'.
			 - [Id:Boolean{Opcional}]: Valor "true" / "false", que determina se na criação do objecto deverá ser gerado um campo Id, 
			 "true" gerar Id, "false" não gerar. Por padrão o valor é "false".
			
			Ex.': easy.create('Pessoa', '#PessoaForm');
			Ex.'': easy.create('Pessoa', '#PessoaForm',true);
			Ex.''': easy.create('Pessoa', { Id:'P0001', Nome:'Afonso Matumona', Idade: 23 });
			Ex.'''': easy.create('Pessoa', { Nome:'Afonso Matumona', Idade: 23 }, true);
			

		# read: easy.read([TableName], [Callback], [FilterExpression:String{Opcional}], [String{Opcional}])
			 - [TableName]: O nome da tabela ou a referência na base de dados.
			 - [Callback]: A função de retorno que é passado um elemento de cada vez.
			 - [FilterExpression:String{Opcional}]: A expressão para filtrar os dados vindo do servidor. Ex.: Name==Afonso Matumona.
			 - [String{Opcional}]: Algum valor que será enviado para o servidor.
			
			Ex.': async loadData function(){ 
					var result = await easy.read('Pessoa');
					console.log(result);
				 }

			Ex.'': easy.read('Pessoa', function(e){
					 console.log(e);
				 });
			
			Ex.''': easy.read('Pessoa', function(e){
					 console.log(e);
				 }, 'Nome==Elias');
			
			Ex.'''': easy.read('Pessoa', function(e){
					 console.log(e);
				 }, null, 'AfonsoMatElias');
			
		# update: easy.update([TableName], [HTMLElement], [ElemKeyVal])
			- [TableName]: O nome da tabela ou a referência na base de dados.
			- [HTMLElement]: O selector do elemento no html. Ex.: '#PessoaForm'.
			- [ElemKeyVal]: O valor da chave primária do objecto ou mesmo o valor do attributo e-key.
			Nota: esta função permite actualização de simplesmente um valor num object, mantendo todos os outros valores intactos, desde no 
			formulário de actualização exista simplesmente os valores de que se pretende actualizar. 
			Ex.': easy.update('Pessoa', '#PessoaForm', 'P0001');
			Ex.'': easy.update('Pessoa', { Nome:'Matumona Elias', Idade: 16 }, 'P0001');

		# delete: easy.delete([TableName], [String], [TableField{Opcional:Default=Id}])
			- [TableName]: O nome da tabela ou a referência na base de dados.
			- [String]: O valor do campo que por padrão é Id do objecto a ser removido.
			- [TableField{Opcional:Default=Id}]: O campo que deseja ser combinado com [String] para que o objecto seja removido.
				Nota: a combinação deverá ser feita no servidor. 
			
			Ex.': easy.delete('Pessoa', 'P0001');
			Ex.'': easy.delete('Pessoa', 'Afonso Matumona',  'Nome');
		
		# getOne: easy.getOne([TableName], [String], [HTMLSelector{Opcional}], [TableField{Opcional:Default=Id}])
			- [TableName]: O nome da tabela ou a referência na base de dados.
			- [String]: O valor do campo que por padrão é Id do objecto a ser seleccionado.
			- [HTMLSelector]: O selector do elemento no HTML DOM. Ex.: '#PessoaForm'.		
			- [TableField{Opcional:Default=Id}]: O campo que deseja ser combinado com [String] para que o objecto seja removido.
				Nota: a combinação deverá ser feita no servidor.
			
			Ex.': async loadData function(){ 
					var result = await easy.getOne('Pessoa', 'P0001');
					console.log(result);
				 }
				 loadData();

			Ex.'': easy.getOne('Pessoa', 'P0001', '#Pessoa');
			
			Ex.''': easy.getOne('Pessoa', 'AfonsoMatElias', '#Pessoa', 'Nome');
	
	Para poder usar as funções de manipulação de dados em uma lista javascript, deve-se adicionar a função 'source' e como paramento deverá
	ser posto a fonte de dados, depois da função  de qualquer manipulador.
	A sintaxe base é: easy.source(...).[Easy-Function]. Conforme está na sintaxe base, depois de ser adicionado a função source, pode se usar
	as funções de manipulação citadas em cima.
	Nota: No caso de ser usado a função 'source' para poder acessar a raiz da lista deverá ser passado 'null' no parametro '[TableName]', com
	isso consegue-se referenciar a raiz da lista já que passou-se null no nome da tabela a acessar.  

	* Extra: Existem algumas funções e extensões auxiliares para que se faça manipulações em um elemento do HTML DOM. As funções para 
	tal são: addHtml, fillHtml, e_generateObj(), e(...).
	As extensões para tal são: fullTyping.

		* easy.addHtml([HTMLSelector{Container}],[DbElement])
			- [HTMLSelector{Container}]: O container onde deve ser listado os itens.
			- [DbElement]: Um elemento de uma lista de dados.
			Nota: A esta função deve ser estritamente usado com a função read.

			Ex.: easy.read('Pessoa', function(e){
					easy.addHtml('#PessoaContianer', e);
				});

		* e_generateObj([HTMLSelector], [GenerateId:Boolean{Opcional}]).
			- [HTMLSelector]: O selector do elemento. Ex.: '#PessoaContianer'.
			- [GenerateId:Boolean{Opcional}]: Valor "true" / "false", que determina se na criação do objecto deverá ser gerado um campo Id, 
			Nota: Retorna result, onde é passado do resultado, e type, onde é passado o tipo do object retornado.
			
			Ex.: 
			// HTML Code
			<form id="PessoaForm" >
				<div class="data-field">
					<label>Nome</label><br/>
					<input type="text" name="Nome" placeholder="Afonso" />
				</div>

				<div class="data-field">
					<label>Idade</label><br/>
					<input type="text" name="Idade" placeholder="23" />
				</div>

				<div e-build="Endereco">
					<div class="data-field">
						<label>Pais</label><br/>
						<select name="PaisId">
							<option e-tmp="Pais" value="-e-Id-">-e-Pais-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Provincia</label><br/>
						<select name="ProvinciaId">
							<option e-tmp="Provincia" value="-e-Id-">-e-Provincia-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Municipio</label><br/>
						<select name="MunicipioId">
							<option e-tmp="Municipio" value="-e-Id-">-e-Municipio-</option>
						</select>
					</div>
					<div class="data-field">
						<label>Rua</label><br/>
						<input type="text" name="Rua" placeholder="23" />
					</div>
					
				</div>

				<div class="data-button">
					<button type="submit" >Salvar</button>
				</div>
			</form>

			// Javascript Code
			var obj = e_generateObj('#PessoaForm')
			console.log(obj);
			
			// Object gerado
			{
				Nome:"",
				Idade:0,
				Endereco:{
					PaisId:"",
					ProvinciaId:"",
					MunicipioId:"",
					Rua:""
				}

			}
		
		* e: e([HTMLElement] ,[Event], [Callback]).
			- [ElementId]: O valor do id do elemento a ser seleccionado.
			- [Event]: O evento a ser disparado. Ex.: 'click'
			- [Callback]: a função que será disparada com base o evento seleccionado.
				O elemento é passado novamente como paramento do callback / da função.
			Nota: Esta extensão permite dar ações a todos os elementos, mesmo aqueles que são via javascript depois do HTML DOM estiver carregado 
			ou pronto. 
			
			Ex.: e('#btn1' ,'click', function(e){
				console.log('Olá', e);
			});

		* fullTyping: [HTMLElement].fullTyping([Callback]).
			- [Callback]: a função que será disparada em 1.5s depois e se e somente se o usuário parou de escrever ou pressionou a tecla enter.
				O mesmo elemento é passado novamente como paramento do callback / da função.
			Nota: Está extensão permite recuperar o texto de um input ou textarea depois de 1.5s ou depois do usuário pressionar a tecla enter,
			Muito usada quando deve se fazer requisição de pesquisa a um servidor ou uma base de dados.
			+ Porquê usar? Resposta: Porque não é muito aconselhavel em cada tecla pressionada fazer requisição a um servidor ou uma base de dados,
			isso poderá sobrecarregar ele, então umas das soluções pra isso pode ser para este problema.

			Ex.: document.getElementById('#serach').fullTyping(function(e){
				console.log('Texto digitado: ', e.value);
			});

Existem comandos são definidos como attributos dos elementos HTML DOM, com a finalidade de mapper o documento HTML DOM e ativar certas funcionalidades,
como listagem e preenchimento automatico e/ou manual de dados vindo do servidor que torna a pagina "dinâmica" ou "em tempo real".
Os comandos para tal são: "e-tmp", "e-m-tmp", "e-id", "e-filter", "e-anm", "-e-", "e-code".
	* e-tmp: Tem como significado "easy-template" que diz ao "easy" que pretende-se usar o elemento corrente como o template
		onde os dados vindo de um servidor serão apresentados, e como o valor do "template" será o nome da tabela na base de dados.
		Sintaxe e-tmp="[TableName]".
		Nota': Usando este comando, a ferramenta automaticamente listará no "template" todos os dados vindo do servidor.
		Nota'': Este comando é estritamente combinado com o comando -e-.
			Ex.: <div e-tmp="Pessoa"></div>
		
    * e-m-tmp: Tem como significado "easy-manual-template" que diz ao "easy" que pretende-se usar o elemento corrente como o template
		onde os dados vindo de um servidor serão apresentados, e como o valor do template será o nome da tabela na base de dados.
		Sintaxe e-m-tmp="[TableName]".
		Nota': Usando este comando, a ferramenta só listará dos dados no "template" os retornados se forem percorridos/usando o callback da 
		função de pesquisa junto com a função addHtml. Sintaxe easy.addHtml('[HTMLElement]',[object]). 
		Nota'': Este comando é estritamente combinado com o comando -e-. 
			Ex.: 
			// HTML Code
			<div id="PessoaContianer"> 
				<div e-m-tmp="Pessoa"></div>
			</div>
			
			// Javascript
			easy.read('Pessoa', function(p){
				easy.addHtml('#PessoaContianer', p);
			});
				
    * -e-[Field]-: Tem como significado "easy-replace" diz ou permite definir valores a um elemento ou propriedades html, ele é muito poderoso 
		por permitir definir valores em qualquer lugar de um HTMLElement.
		Nota: Para acessar propriedades internas de um objecto deve-se pôr ponto '.' Ex.: Pessoa.Endereco.Nome 
		Sintaxe -e-[Field]-.
		Ex.: <div e-tmp="Pessoa">
				<p title="-e-Descricao-"> Este é nome -e-Nome- está a vir de uma base de dados ou um servidor, e esta é a usa descrição: 
				-e-Descricao-.</p>
			</div>

		No caso de atributos, este comando pode ser combinado com a expressão 'e-' antes do nome do tal. Ex.: e-src="assets/-e-Name-". Isto possibilita 
		criar dois atributos com o mesmo propósito, Ex.: 'src' e 'e-src', isso significa para o primeiro atributo 'src' pode se definir o valor padrão 
		Ex.: src="assets/default-img.png". e 'e-src' o valor a ser atribuido no momento de execução. Ex.: e-src="assets/-e-Img-".
	
	* e-filter: Tem como significado "easy-filter" diz ou permite filtrar dados a partir do elemento html, os dados vindo do servidor, 
		simplesmente uma condição de cada vez. Os operadores para o filtros são: ==, !=, <, >, <=, >=. Sintaxe e-filter="[Prop][Op][Val]".
		Nota': O comando deve ser posto no container de listagem dos elementos. Mas para o caso de que o container e o template são os mesmos 
			elementos pode ser posto neste mesmo elemento.
		Nota'': Este comando só funciona com o comando "e-tmp".
			Ex.: <div e-tmp="Pessoa" e-filter="Idade>=10">
					<label> -e-Nome- </label>
					<label> -e-Idade- </label>
				</div>
	
    * e-id: Tem como significado "easy-id" diz ou permite que o easy conheça qual é a chave primária do elemento a ser listado ou preenchido,
	se não for definida ela assume o valor de Id, que significa que o campo 'chave primária' do elemento que está a ser listado ou preenchido,
	é 'Id'. Nota: é muito importante definir o este campo se por acaso a chave do elemento não é 'Id', é por causa dela o elemento se torna 
	dinâmico ou 'realtime'. 
		Nota': Para todas as tabela que têm a chave primária "Id" (Pascal Case), pode não se definir ele, porque automaticamente será reconhecido.
		Nota'': Caso a chave primária não seja "Id" (Pascal Case), deve-se explicitamente defini-lá tal como ela é.
			Ex.: <div e-tmp="Pessoa" e-id="IdPessoa">
					<label > -e-Nome- </label>
				</div>
				
	* e-anm: Tem como significado "easy-animation" diz ou permite que os elementos sejam adicionados no HTML DOM de uma forma animada, com uma certa 
		aparicão e transição. Sintaxe e-anm="[Direction]".
		As direcções são: "up", "down", "left" ou "right". 
		 - up: quer dizer que os elementos serão postos no HTML DOM animadamente de baixo para cima. 
		 - down: quer dizer que os elementos serão postos no HTML DOM animadamente de cima para baixo.
		 - left: quer dizer que os elementos serão postos no HTML DOM animadamente da direita para esquerda. 
		 - right: quer dizer que os elementos serão postos no HTML DOM animadamente da esquerda para direita.
		Ex.: <div e-tmp="Pessoa" e-anm="up">
				<label> -e-Nome- </label>
			</div>
	
	* e-code: Tem como significado "easy-code" diz ou permite que o easy possa distinguir os containers dos templates.

O easy.js não funciona por si só, para que tenha acesso a dados deve ser combinado com o outros ficheiros que possibilitam este acesso,
os ficheiros pode ser encontrado na mesma secção ou pasta do easy.js, os ficheiros têm a seguinte estrutura: easy.[type].js